namespace com.ji.DAO;

use JDBConnection.ump;
use Address.ump;
class AddressDao{
  depend java.sql.*;
  depend java.util.*;

  0..1 -> 1 JDBConnection jdbc;
  0..1 -> 1 Brand brand;

  PreparedStatement ps;
  Connection connection;
  public AddressDao() {
    jdbc = new JDBConnection(connection);
    connection = jdbc.getConnection();
  }
	
	
  public Address selectOneAddress(Integer addressId){
    Address address = null;
    Member memberForm = new Member();
    MemberDao memberDao = new MemberDao();
	  try {
	    this.ps = connection.prepareStatement("select * from db_address where id=?");
		ps.setString(1, addressId.toString());
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
		  address = new Address();
	   	  address.setId(Integer.valueOf(rs.getString(1)));
	      address.setCountry(rs.getString(2));
		  address.setProvince(rs.getString(3));
		  address.setCity(rs.getString(4));
		  address.setStreetNumber(rs.getString(5));
		  address.setStreetName(rs.getString(6));
		  address.setPostalCode(rs.getString(7));
		  address.setTelephone(rs.getString(8));
		  memberForm = memberDao.selectOneMember(Integer.valueOf(rs.getString(9)));
	      address.setMember(memberForm);
		}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return address;
  }

   public boolean deleteAddress(Integer id){
    try {
      ps = connection.prepareStatement("delete from db_address where id=?");
	  ps.setString(1, id.toString());
	  ps.executeUpdate();
	  ps.close();
	  return true;
	} catch (SQLException ex) {
	  ex.printStackTrace();
	  return false;
	}
  }


  public void updateAddress(Address form){
    try {
      ps = connection.prepareStatement("update db_address set country=?,province=?,city=?,streetNumber=?,streetName=?,postalCode=?,telephone=? where id=?");
	  ps.setString(1, form.getCountry());
	  ps.setString(2, form.getCity());
	  ps.setString(3, form.getProvince());
	  ps.setString(4, form.getStreetNumber());
	  ps.setString(5, form.getStreetName());
	  ps.setString(6, form.getPostalCode());
      ps.setString(7, form.getTelephone());
	  ps.executeUpdate();
	  ps.close();
	 } catch (SQLException ex) {
		ex.printStackTrace();
	}
  }


  public void insertAddress(Address form){
    try {
      ps = connection.prepareStatement("insert into db_address values (null,?,?,?,?,?,?,?,?)");
	  ps.setString(1, form.getCountry());
	  ps.setString(2, form.getProvince());
	  ps.setString(3, form.getCity());
	  ps.setString(4, form.getStreetNumber());
	  ps.setString(5, form.getStreetName());
	  ps.setString(6, form.getPostalCode());
	  ps.setString(7, form.getTelephone());
	  ps.setString(8, String.valueOf(form.getMember().getId()));
	  ps.executeUpdate();
	  ps.close();
	} catch (SQLException ex) {
	  ex.printStackTrace();
	}
  }


  public List<Address> selectAddress(){
    List<Address> list = new ArrayList<Address>();
	Address address = null;
	Member memberForm = new Member();
	MemberDao memberDao = new MemberDao();
	  try {
	    this.ps = connection.prepareStatement("select * from db_address order by id DESC");
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
		address = new Address();
		address.setId(Integer.valueOf(rs.getString(1)));
		address.setCountry(rs.getString(2));
		address.setProvince(rs.getString(3));
		address.setCity(rs.getString(4));
		address.setStreetNumber(rs.getString(5));
		address.setStreetName(rs.getString(6));
		address.setPostalCode(rs.getString(7));
		address.setTelephone(rs.getString(8));
		memberForm = memberDao.selectOneMember(Integer.valueOf(rs.getString(9)));
	    address.setMember(memberForm);
		list.add(address);
		}
		} catch (SQLException ex) {
		   ex.printStackTrace();
		}
		return list;
  }
  public List<Address> selectMemberAddress(Integer id){
    List<Address> list = new ArrayList<Address>();
	Address address = null;
	Member memberForm = new Member();
	MemberDao memberDao = new MemberDao();
	  try {
	    this.ps = connection.prepareStatement("select * from db_address where memberId=?");
	    ps.setInt(1, id);
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
		address = new Address();
		address.setId(Integer.valueOf(rs.getString(1)));
		address.setCountry(rs.getString(2));
		address.setProvince(rs.getString(3));
		address.setCity(rs.getString(4));
		address.setStreetNumber(rs.getString(5));
		address.setStreetName(rs.getString(6));
		address.setPostalCode(rs.getString(7));
		address.setTelephone(rs.getString(8));
		memberForm = memberDao.selectOneMember(Integer.valueOf(rs.getString(9)));
	    address.setMember(memberForm);
		list.add(address);
		}
		} catch (SQLException ex) {
		   ex.printStackTrace();
		}
		return list;
  }
}
  