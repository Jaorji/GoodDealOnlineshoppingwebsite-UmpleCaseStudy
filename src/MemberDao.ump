namespace com.ji.DAO;
use JDBConnection.ump;
use Member.ump;

class MemberDao{

depend java.sql.*;
depend java.util.*;

0..1 -> 1 JDBConnection jdbc;
0..1 -> 1 Member member;

PreparedStatement ps;
Connection connection;
public MemberDao() {
    jdbc = new JDBConnection(connection);
    connection = jdbc.getConnection();
  }


  public boolean updatePassword(String password, Integer id) {
    try {
      ps = connection.prepareStatement("update db_member set password=? where id=?");
      ps.setString(1, password);
      ps.setInt(2, id.intValue());
      ps.executeUpdate();
      ps.close();
      return true;
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
      return false;
    }
  }


  public Member selectFind(String name, String result) {
    Member member = null;
    try {
      ps = connection.prepareStatement("select * from db_member where userName=? and answer=?");
      ps.setString(1, name);
      ps.setString(2, result);
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        member = new Member();
         member.setId(Integer.valueOf(rs.getString(1)));
        member.setFirstName(rs.getString(2));
        member.setLastName(rs.getString(3));
        member.setBirthday(rs.getString(4));
        member.setUserName(rs.getString(5));      
        member.setPassword(rs.getString(6));
        member.setEmailAddress(rs.getString(7));        
        member.setProfession(rs.getString(8));
        member.setQuestion(rs.getString(9));
        member.setAnswer(rs.getString(10));
      }
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
    return member;
  }

  public Member selectMember(String name) {
    Member member = null;
    try {
      ps = connection.prepareStatement("select * from db_member where userName=?");
      ps.setString(1, name);
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        member = new Member();
        member.setId(Integer.valueOf(rs.getString(1)));
        member.setFirstName(rs.getString(2));
        member.setLastName(rs.getString(3));
        member.setBirthday(rs.getString(4));
        member.setUserName(rs.getString(5));      
        member.setPassword(rs.getString(6));
        member.setEmailAddress(rs.getString(7));        
        member.setProfession(rs.getString(8));
        member.setQuestion(rs.getString(9));
        member.setAnswer(rs.getString(10));
      }
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
    return member;
  }


  public boolean deleteMember(Integer id) {
    try {
      ps = connection.prepareStatement("delete from db_member where id=?");
      ps.setString(1, id.toString());
      ps.executeUpdate();
      ps.close();
      return true;
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
      return false;
    }
  }


  public void insertMember(Member form) {
    try {
      ps = connection.prepareStatement("insert into db_member values (null,?,?,?,?,?,?,?,?,?)");
      ps.setString(1, form.getFirstName());
      ps.setString(2, form.getLastName());
      ps.setString(3, form.getBirthday());
      ps.setString(4, form.getUserName());
      ps.setString(5, form.getPassword());
      ps.setString(6, form.getEmailAddress());
      ps.setString(7, form.getProfession());
      ps.setString(8, form.getQuestion());
      ps.setString(9, form.getAnswer());
      ps.executeUpdate();
      ps.close();
    }
    catch (SQLException ex) {
    }
  }


  public void updateMember(Member form) {
    try {
      ps = connection.prepareStatement("update db_member set firstName=?,lastName=?,birthday=?,userName=?,password=?,emailAddress=?,profession=?,question=?,answer=? where id=?");
       ps.setString(1, form.getFirstName());
      ps.setString(2, form.getLastName());
      ps.setString(3, form.getBirthday());
      ps.setString(4, form.getUserName());
      ps.setString(5, form.getPassword());
      ps.setString(6, form.getEmailAddress());
      ps.setString(7, form.getProfession());
      ps.setString(8, form.getQuestion());
      ps.setString(9, form.getAnswer());
      ps.setString(10, String.valueOf(form.getId()));
      ps.executeUpdate();
      ps.close();
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
  }




  public List<Member> selectMember() {
    List<Member> list = new ArrayList<Member>();
    Member member = null;
    try {
      ps = connection.prepareStatement("select * from db_member order by id DESC");
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
      member = new Member();
      member.setId(Integer.valueOf(rs.getString(1)));
        member.setFirstName(rs.getString(2));
        member.setLastName(rs.getString(3));
        member.setBirthday(rs.getString(4));
        member.setUserName(rs.getString(5));      
        member.setPassword(rs.getString(6));
        member.setEmailAddress(rs.getString(7));        
        member.setProfession(rs.getString(8));
        member.setQuestion(rs.getString(9));
        member.setAnswer(rs.getString(10));
        list.add(member);
      }
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
    return list;
  }


  public Member selectOneMember(Integer id) {
    Member member = null;
    try {
      ps = connection.prepareStatement("select * from db_member where id=?");
      ps.setInt(1, id.intValue());
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        member = new Member();
        member.setId(Integer.valueOf(rs.getString(1)));
        member.setFirstName(rs.getString(2));
        member.setLastName(rs.getString(3));
        member.setBirthday(rs.getString(4));
        member.setUserName(rs.getString(5));      
        member.setPassword(rs.getString(6));
        member.setEmailAddress(rs.getString(7));        
        member.setProfession(rs.getString(8));
        member.setQuestion(rs.getString(9));
        member.setAnswer(rs.getString(10));
      }
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
    return member;
  }



}