namespace com.ji.DAO;

use Manager.ump;
use JDBConnection.ump;
class ManagerDao{
depend java.sql.*;
depend java.util.*;

0..1 -> 1 JDBConnection jdbc;
0..1 -> 1 Manager manager;

PreparedStatement ps;
Connection connection;
public ManagerDao() {
    jdbc = new JDBConnection(connection);
    connection = jdbc.getConnection();
  }
  
   
  public void insertManager(Manager form) {
    try {

      ps = connection.prepareStatement("insert into db_manager values (null,?,?,?,?,?,?,?)");
      ps.setString(1, form.getFirstName());
      ps.setString(2, form.getLastName());
      ps.setString(3, form.getBirthday());
      ps.setString(4, form.getPassword());
      ps.setString(5, form.getEmailAddress());
      ps.setString(6, form.getAccountName());
      ps.setInt(7, 0);
      ps.executeUpdate();
      ps.close();
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
  }

  public void updateManagerPassword(Manager form) {
    try {
      ps = connection.prepareStatement("update db_manager set password=? where accountName=?");
      ps.setString(1, form.getPassword());
      ps.setString(2, form.getAccountName());
      ps.executeUpdate();
      ps.close();
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
  }



  public void deleteManager(Integer id) {
    try {
      ps = connection.prepareStatement("delete from db_manager where id=?");
      ps.setInt(1, id.intValue());
      ps.executeUpdate();
      ps.close();
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
  }

  public List<Manager> selectManager() {
    List<Manager> list = new ArrayList<Manager>();
    Manager manager = null;
    try {
      ps = connection.prepareStatement("select * from db_manager order by id DESC");
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        manager = new Manager();
        manager.setId(Integer.valueOf(rs.getString(1)));
        manager.setFirstName(rs.getString(2));
        manager.setLastName(rs.getString(3));
        manager.setBirthday(rs.getString(4));
        manager.setPassword(rs.getString(5));
        manager.setEmailAddress(rs.getString(6));
        manager.setAccountName(rs.getString(7));
          manager.setIfAdmin(Integer.valueOf(rs.getString(8)));
        list.add(manager);
      }
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
    return list;
  }

  public Manager selectOne(String account) {
    Manager manager = null;
    try {
      ps = connection.prepareStatement("select * from db_manager where accountName=?");
      ps.setString(1, account);
      ResultSet rs = ps.executeQuery();
      while (rs.next()) {
        manager = new Manager();
        manager.setId(Integer.valueOf(rs.getString(1)));
        manager.setFirstName(rs.getString(2));
        manager.setLastName(rs.getString(3));
        manager.setBirthday(rs.getString(4));
        manager.setPassword(rs.getString(5));
        manager.setEmailAddress(rs.getString(6));
        manager.setAccountName(rs.getString(7));
          manager.setIfAdmin(Integer.valueOf(rs.getString(8)));
      }
    }
    catch (SQLException ex) {
    	ex.printStackTrace();
    }
    return manager;
  }

  
}